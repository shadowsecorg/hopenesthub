<div class="p-4">
  <h2>Patient Status</h2>
  <div class="card p-3 mb-4">
    <form class="row g-2 align-items-center" method="get" action="/admin/patients">
      <div class="col-md-3"><input type="text" class="form-control" name="q" placeholder="Search by Name"></div>
      <div class="col-md-3"><input type="text" class="form-control" name="pid" placeholder="Search by Patient ID"></div>
      <div class="col-md-3">
        <select class="form-select" name="status">
          <option value="">All Health Statuses</option>
          <option value="stable">Stable</option>
          <option value="at-risk">At Risk</option>
          <option value="critical">Critical</option>
        </select>
      </div>
      <div class="col-md-3">
        <button type="submit" class="btn btn-primary w-100">Filter</button>
      </div>
      <!-- <div class="col-md-3 text-end"><button type="button" class="btn btn-primary" data-bs-toggle="modal"
          data-bs-target="#addPatientModal">Add Patient</button></div> -->
    </form>
  </div>
  <div class="card p-3 mb-4">
    <div class="table-responsive">
      <table class="table table-striped">
        <thead>
          <tr>
            <th>Name</th>
            <th>Patient ID</th>
            <th>Health Status</th>
            <th>Actions</th>
          </tr>
        </thead>
        <tbody>
          <% (patients || []).forEach(function(p){ %>
            <tr>
              <td>
                <%= p.User?.name || '-' %>
              </td>
              <td>
                <%= p.id %>
              </td>
              <td>
                <%= p.health_status || 'Stable' %>
              </td>
              <td>
                <button class="btn btn-sm btn-primary btn-details btn-equal me-2" data-id="<%= p.id %>" data-bs-toggle="modal"
                  data-bs-target="#patientDetailsModal">View Details</button>
                <form class="d-inline" method="post" action="/admin/patients/<%= p.id %>/delete"><button
                    class="btn btn-sm btn-danger btn-equal">Delete</button></form>
              </td>
            </tr>
            <% }) %>
        </tbody>
      </table>
    </div>
  </div>
</div>

<!-- Add Patient Modal -->
<div class="modal fade" id="addPatientModal" tabindex="-1" aria-labelledby="addPatientModalLabel" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <form method="post" action="/admin/patients">
        <div class="modal-header">
          <h5 class="modal-title" id="addPatientModalLabel">Add Patient</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
        <div class="modal-body">
          <div class="mb-3"><label class="form-label">User ID</label><input name="user_id" class="form-control"
              required></div>
          <div class="mb-3"><label class="form-label">Cancer Type</label><input name="cancer_type" class="form-control">
          </div>
          <div class="mb-3"><label class="form-label">Diagnosis Date</label><input name="diagnosis_date" type="date"
              class="form-control"></div>
          <div class="mb-3"><label class="form-label">Assigned Doctor (User ID)</label><input name="assigned_doctor_id"
              class="form-control"></div>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
          <button type="submit" class="btn btn-primary">Save</button>
        </div>
      </form>
    </div>
  </div>
</div>

<div class="modal fade" id="patientDetailsModal" tabindex="-1" aria-labelledby="patientDetailsModalLabel"
  aria-hidden="true">
  <div class="modal-dialog modal-lg">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="patientDetailsModalLabel">Patient Details</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <h6>Patient Information</h6>
        <p><strong>Name:</strong> <span id="dName">-</span></p>
        <p><strong>Patient ID:</strong> <span id="dPid">-</span></p>
        <p><strong>Health Status:</strong> <span id="dStatus">-</span></p>
        <hr>
        <h6>Wearable Data</h6>
        <div class="row">
          <div class="col-md-4">
            <p><strong>Heart Rate:</strong> <span id="dHr">-</span></p>
            <div class="chart-container">
              <canvas id="heartRateChart"></canvas>
            </div>
          </div>
          <div class="col-md-4">
            <p><strong>Sleep Quality:</strong> <span id="dSleep">-</span></p>
            <div class="chart-container">
              <canvas id="sleepQualityChart"></canvas>
            </div>
          </div>
          <div class="col-md-4">
            <p><strong>Activity:</strong> <span id="dSteps">-</span></p>
            <div class="chart-container">
              <canvas id="activityChart"></canvas>
            </div>
          </div>
        </div>
        <hr>
        <h6>Symptoms and Emotions History</h6>
        <div class="table-responsive">
          <table class="table table-striped" id="dSE">
            <thead>
              <tr>
                <th>Date</th>
                <th>Symptom</th>
                <th>Emotion</th>
                <th>Notes</th>
              </tr>
            </thead>
            <tbody>

            </tbody>
          </table>
        </div>
        <hr>
        <h6>Active Alerts</h6>
        <ul class="list-group" id="dAlerts"></ul>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
      </div>
    </div>
  </div>
</div>

<script src="/public/vendor/bootstrap/js/bootstrap.bundle.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script src="/frontend/admin-panel/charts.js"></script>
<script>
  let hrChart, sleepChart, activityChart;
  function destroyChartIfExists(id) {
    try { const inst = Chart.getChart(id); if (inst) inst.destroy(); } catch (e) {}
  }
  function statusLabel(s) {
    const map = { 'stable': 'Stable', 'at-risk': 'At Risk', 'critical': 'Critical' };
    const key = String(s || '').toLowerCase();
    return map[key] || 'Stable';
  }

  document.querySelectorAll('.btn-details').forEach(btn => {
    btn.addEventListener('click', async function () {
      const pid = this.getAttribute('data-id');
      try {
        const r = await fetch(`/admin/patients/${pid}/details?format=json`);
        const data = await r.json();
        document.getElementById('dName').textContent = data.patient?.User?.name || '-';
        document.getElementById('dPid').textContent = `PT${data.patient?.id || ''}`;
        document.getElementById('dStatus').textContent = statusLabel(data.patient?.health_status);

        const latest = (data.metrics || [])[0] || {};
        document.getElementById('dHr').textContent = latest.heart_rate ? `${latest.heart_rate} bpm` : '-';
        const sleepPct = (latest.sleep_hours || latest.sleep_hours === 0)
          ? Math.round((Number(latest.sleep_hours) || 0) * 100 / 8)
          : null;
        document.getElementById('dSleep').textContent = (sleepPct !== null) ? `${sleepPct} %` : '-';
        document.getElementById('dSteps').textContent = latest.steps ? `${latest.steps} steps` : '-';

        // Populate Symptoms & Emotions & Notes history (combined)
        const tbody = document.querySelector('#dSE tbody');
        if (tbody) {
          const rows = [];
          (data.symptoms || []).forEach(s => rows.push({ date: s.recorded_at, symptom: s.symptom_type || '-', emotion: '-', notes: s.notes || '-' }));
          (data.emotions || []).forEach(e => rows.push({ date: e.recorded_at, symptom: '-', emotion: e.emotion_type || '-', notes: e.notes || '-' }));
          (data.notes || []).forEach(n => rows.push({ date: n.created_at, symptom: '-', emotion: '-', notes: (n.content || '').toString().slice(0, 120) }));
          rows.sort((a,b)=>new Date(b.date)-new Date(a.date));
          tbody.innerHTML = '';
          rows.slice(0, 10).forEach(row => {
            const tr = document.createElement('tr');
            const d = new Date(row.date);
            tr.innerHTML = `<td>${d.toISOString().slice(0, 10)}</td><td>${row.symptom}</td><td>${row.emotion}</td><td>${row.notes}</td>`;
            tbody.appendChild(tr);
          });
        }

        // Populate Alerts
        const alertsUl = document.getElementById('dAlerts');
        if (alertsUl) {
          alertsUl.innerHTML = '';
          (data.alerts || []).forEach(a => {
            const li = document.createElement('li');
            const when = a.created_at ? new Date(a.created_at).toISOString().replace('T',' ').slice(0,16) : '';
            li.className = 'list-group-item';
            li.textContent = `${a.alert_type || 'Alert'}${a.severity ? ' ('+a.severity+')' : ''}: ${when}`;
            alertsUl.appendChild(li);
          });
          if (!alertsUl.children.length) {
            const li = document.createElement('li');
            li.className = 'list-group-item';
            li.textContent = 'No active alerts';
            alertsUl.appendChild(li);
          }
        }

        // Charts from metrics
        const labels = (data.metrics || []).slice().reverse().map(m => new Date(m.recorded_at).toISOString().slice(5,10));
        const hrSeries = (data.metrics || []).slice().reverse().map(m => m.heart_rate || 0);
        const sleepSeries = (data.metrics || []).slice().reverse().map(m => Math.round(((Number(m.sleep_hours)||0)*100/8)));
        const stepsSeries = (data.metrics || []).slice().reverse().map(m => m.steps || 0);

        destroyChartIfExists('heartRateChart');
        hrChart = new Chart(document.getElementById('heartRateChart'), { type: 'line', data: { labels, datasets: [{ label: 'Heart Rate (bpm)', data: hrSeries, borderColor: '#dc3545', fill: false }] }, options: { responsive: true, maintainAspectRatio: false } });
        destroyChartIfExists('sleepQualityChart');
        sleepChart = new Chart(document.getElementById('sleepQualityChart'), { type: 'bar', data: { labels, datasets: [{ label: 'Sleep Quality (%)', data: sleepSeries, backgroundColor: '#007bff' }] }, options: { responsive: true, maintainAspectRatio: false } });
        destroyChartIfExists('activityChart');
        activityChart = new Chart(document.getElementById('activityChart'), { type: 'line', data: { labels, datasets: [{ label: 'Steps', data: stepsSeries, borderColor: '#28a745', fill: false }] }, options: { responsive: true, maintainAspectRatio: false } });
      } catch (e) { }
    });
  });
</script>
<script src="/frontend/admin-panel/script.js"></script>